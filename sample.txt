[exp] (let ((n 0)) (while (< n 10) (print n) (setq n (+ n 1))))
0
1
2
3
4
5
6
7
8
9
[eval] 10
[exp] (let* ((x 10) (y (* 2 x))) (print x) (print y) (cons x y))
10
20
[eval] (10 . 20)
[exp] (defun sqr+0 (x y) (if (null x) y (sqr+0 (cdr x) (+ (* (car x) (car x)) y))))
[eval] sqr+0
[exp] (defun sqr+ (x) (sqr+0 x 0))
[eval] sqr+
[exp] (sqr+ (quote (1 2 3 4 5)))
[eval] 55
[exp] (defun make-variable-c nil (let ((c 0)) (list (closure nil c) (closure nil (setq c (+ c 1))) (closure nil (setq c (- c 1))))))
[eval] make-variable-c
[exp] (let* ((funcs (make-variable-c)) (get-c (car funcs)) (inc-c (cadr funcs)) (dec-c (caddr funcs))) (print (funcall get-c)) (funcall inc-c) (print (funcall get-c)) (funcall dec-c) (print (funcall get-c)))
0
1
0
[eval] 0
[exp] (defun make-queue nil (let ((queue (cons nil nil))) (setcar queue queue) queue))
[eval] make-queue
[exp] (defun en-queue (queue x) (let ((q (cons x nil))) (setcdr (car queue) q) (setcar queue q) queue))
[eval] en-queue
[exp] (defun get-list (queue) (cdr queue))
[eval] get-list
[exp] (defun is-prime (p-list x) (if (null p-list) t (let ((p (car p-list))) (cond ((gt (mul p p) x) t) ((zerop (mod x p)) nil) (t (is-prime (cdr p-list) x))))))
[eval] is-prime
[exp] (defun primes (queue x max) (cond ((gt x max) (cons 2 (get-list queue))) ((is-prime (get-list queue) x) (primes (en-queue queue x) (add x 2) max)) (t (primes queue (add x 2) max))))
[eval] primes
[exp] (primes (make-queue) 3 100)
[eval] (2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)
[exp] (defun make-pvect nil (setq plen 25) (setq pidx 1) (setq pvect (make-vector plen 0)) (setq ppvect (make-vector plen 0)))
[eval] make-pvect
[exp] (defun primeset (x) (if (eqn pidx plen) nil (vset pvect pidx x) (vset ppvect pidx (mul x x)) (incq pidx)))
[eval] primeset
[exp] (defun is-prime (x i) (let ((p (vref pvect i)) (pp (vref ppvect i))) (cond ((zerop p) t) ((gt pp x) t) ((zerop (mod x p)) nil) (t (is-prime x (inc i))))))
[eval] is-prime
[exp] (defun primes (x) (if (is-prime x 1) (if (primeset x) (primes (add x 2)) (vset pvect 0 2) pvect) (primes (add x 2))))
[eval] primes
[exp] (make-pvect)
[eval] #(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
[exp] (primes 3)
[eval] #(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)
[exp] (symbol-function (function primes))
[eval] (lambda (x) (if (is-prime x 1) (if (primeset x) (primes (add x 2)) (vset pvect 0 2) pvect) (primes (add x 2))))
[exp] (symbol-function (function add))
[eval] "#<subr add>"
[exp] (setq IN_FILE "sample.lisp")
[eval] "sample.lisp"
[exp] (setq SPLIT_LIST (split-string IN_FILE "."))
[eval] ("sample" "lisp")
[exp] (setq OUT_FILE (concat (car SPLIT_LIST) "." "txt"))
[eval] "sample.txt"
[exp] (mapcar (function list) (quote (a b c d e f)))
[eval] ((a) (b) (c) (d) (e) (f))
[exp] (mapcan (function list) (quote (a b c d e f)))
[eval] (a b c d e f)
[exp] (mapc (function list) (quote (a b c d e f)))
[eval] (a b c d e f)
[exp] (mapconcat (function symbol-name) (quote (a b c d e f)) " ")
[eval] "a b c d e f"
[exp] (setq tree (quote ((a . 10) (b . 20) (c . 30) (d . 40))))
[eval] ((a . 10) (b . 20) (c . 30) (d . 40))
[exp] (assoc (quote b) tree)
[eval] (b . 20)
[exp] (assoc (quote e) tree)
[eval] nil
[exp] (rassoc 30 tree)
[eval] (c . 30)
[exp] (rassoc 50 tree)
[eval] nil
