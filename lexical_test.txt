;;
;; Lexical変数が無限Extentを持つことの確認 (SECD8 より)
;;

(define (make-variable-c)
  (let ((c 0))
    (list
      (lambda () c)
      (lambda () (set! c (+ c 1)))
      (lambda () (set! c (- c 1)))
)))

(let* ((funcs (make-variable-c))
       (c 1000)
       (get-c (car funcs))
       (inc-c (cadr funcs))
       (dec-c (caddr funcs)))
  (print (get-c))
  (inc-c)
  (print (get-c))
  (dec-c)
  (dec-c)
  (print (get-c))
)
;-> 0
;   1
;   -1

----- Lisp用 -----
(defun make-variable-c ()
  (let ((c 0))
    (list
      (lambda () c)
      (lambda () (setq c (+ c 1)))
      (lambda () (setq c (- c 1)))
)))

(let* ((funcs (make-variable-c))
       (c 1000)
       (get-c (car funcs))
       (inc-c (cadr funcs))
       (dec-c (caddr funcs)))
  (print (funcall get-c))
  (funcall inc-c)
  (print (funcall get-c))
  (funcall dec-c)
  (funcall dec-c)
  (print (funcall get-c))
)
;-> 0
;   1
;   -1

----- CPP_Lisp2 用 -----
(1)式
(defun make-variable-c () (let ((c 0)) (list (lambda () c) (lambda () (setq c (+ c 1))) (lambda () (setq c (- c 1))))))

(2)式
(let* ((funcs (make-variable-c)) (c 1000) (get-c (car funcs)) (inc-c (cadr funcs)) (dec-c (caddr funcs))) (print (funcall get-c)) (funcall inc-c) (print (funcall get-c)) (funcall dec-c) (funcall dec-c) (print (funcall get-c)))
;-> 1000
;   1001
;   999
;   [eval] 999

残念ながら、CPP_Lisp2 では、無限エクステントは実現できていない。
変数の束縛はダイナミックバインディングであり、
(lambda 中では、最も最近確保されたローカル変数 c が参照されるし、
それがなければ、グローバル変数 c が参照される。

----- CPP_Lisp2 用 (closure を使用) -----
(1)式
(defun make-variable-c ()
  (let ((c 0))
    (list
      (closure () c)
      (closure () (setq c (+ c 1)))
      (closure () (setq c (- c 1))))))

(2)式
(let* ((funcs (make-variable-c))
       (c 1000)
       (get-c (car funcs))
       (inc-c (cadr funcs))
       (dec-c (caddr funcs)))
  (print (funcall get-c))
  (funcall inc-c)
  (print (funcall get-c))
  (funcall dec-c)
  (funcall dec-c)
  (print (funcall get-c)))
;-> 0
;   1
;   -1
;   [eval] -1
レキシカルバインディングになった！
